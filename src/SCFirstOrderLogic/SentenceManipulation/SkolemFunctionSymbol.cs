using SCFirstOrderLogic.SentenceFormatting;

namespace SCFirstOrderLogic.SentenceManipulation
{
    /// <summary>
    /// Class for Skolem function symbols, which are generated by the sentence normalisation process and feature in sentences in conjunctive normal form (CNF).
    /// </summary>
    /// <remarks>
    /// NB: Doesn't override equality or hash code, so uses reference equality;
    /// and the normalisation process creates exactly one instance per variable scope - thus achieving standardisation
    /// without having to muck about with anything like trying to ensure names that are unique strings
    /// (which should only be a rendering concern anyway).
    /// <para/>
    /// As with standardised variables, value semantics for equality might be useful.
    /// </remarks>
    public class SkolemFunctionSymbol
    {
        /// <remarks>
        /// Intended only for construction by the normalisation process.
        /// </remarks>
        internal SkolemFunctionSymbol(ExistentialQuantification originalVariableScope, Sentence originalSentence)
        {
            OriginalVariableScope = originalVariableScope;
            OriginalSentence = originalSentence;
        }

        /// <summary>
        /// Gets the quantification in which the original variable was declared.
        /// </summary>
        public ExistentialQuantification OriginalVariableScope { get; }

        /// <summary>
        /// Gets the original top-level sentence in which the variable was declared.
        /// Contains all ancestors of the original variable declaration
        /// in the sentence tree - starting with the quantification that declares the variable, and ending with the
        /// root element of the sentence. Intended for use within explanations of query results.
        /// </summary>
        public Sentence OriginalSentence { get; }

        /// <summary>
        /// Gets the underlying (existentially quantified) variable symbol that this Skolem function represents the existential instantiation of.
        /// </summary>
        public StandardisedVariableSymbol StandardisedVariableSymbol => (StandardisedVariableSymbol)OriginalVariableScope.Variable.Symbol;

        /// <inheritdoc/>
        public override string ToString() => new SentenceFormatter().Print(this);
    }
}
